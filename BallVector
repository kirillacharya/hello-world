#include "TXLib.h"

//-----------------------------------------------------------------------------

const int TopNum = 5;
const int TableX1 = 85*1300/100, TableY1 = 700/(TopNum + 1);
const int RandX = 1300 - TableX1, RandY = 700;
double DT = 0.1;
const int Size = 100;

//-----------------------------------------------------------------------------

class CBall
    {
    double x, y;
    double vx, vy;

    public:

    int r;
    int rNew;

    double Px, Py, P;

    int bounce;

    COLORREF SFcolor;
    COLORREF Scolor;

    CBall ();

    void DrawBall ();
    void BallPhysics ();
    //double VectProjection ();
    };

//-----------------------------------------------------------------------------

class CManager
    {
    public:

    CBall Array [Size] = {};

    void MainCycle ();

    CManager ();

    void Collision ();

    private:

    int MomentSize;

    void PrintBallArray ();
    void AllBallsDraw ();
    void AllBallsPhysics ();
    void BounceCounter ();
    void SizePlus ();
    void SizeMinus  ();
    void Selection ();
    int Searcher ( int min, int i );
    void Swapper ( int a, int b );

    };

//-----------------------------------------------------------------------------

struct SVector
    {
    double x, y;
    }   

//-----------------------------------------------------------------------------

void Title          ( int X1, int Y1, int X2, int Y2, COLORREF Tcolor );
void Selection      ( CBall Array[], int size );
int Searcher        ( CBall Array[], int size, int min, int i );
void Swapper        ( CBall Array[], int a, int b );
void PrintBallArray ( CBall Array[], int size, int TableX1, int TopNum );
int Random          ( double min, int max );

SVector VectScalarProduct ();
SVector VectSum ();
SVector VectSubsract ();
SVector VectProjection ();

//-----------------------------------------------------------------------------

int main()
    {
    txCreateWindow ( 1300, 700 );

    int MomentSize = 10;

    CManager Man1;

    Man1.MainCycle ();

    return 0;
    }

//-----------------------------------------------------------------------------

CBall::CBall ():

    x       (Random(0, TableX1)),
    y       (Random(0, txGetExtentY())),
    vx      (Random(10, 50)),
    vy      (Random(10, 50)),
    r       (Random(20, 50)),
    rNew    (r),
    Px      (r * vx),
    Py      (r * vy),
    P       (sqrt( Px*Px + Py*Py )),
    bounce  (0),
    SFcolor ( RGB (rand()%255, rand()%255, rand()%255)),
    Scolor  (SFcolor)
    {}

//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------

CManager::CManager ():

    Array ({}),
    MomentSize (10)
    {}

//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------


/*int CBall::VectProjection ()
    {

    }*/

void CBall::DrawBall ()
    {
    txSetColor ( Scolor, 3 );
    txSetFillColor ( SFcolor );

    txCircle ( x, y, rNew );
    }

//-----------------------------------------------------------------------------

void CManager::AllBallsDraw ( )
    {
    for ( int i = 0; i < MomentSize; i++ )
        Array[i].DrawBall();
    }

//-----------------------------------------------------------------------------

void CBall::BallPhysics ( )
    {
    x = x + vx * DT;
    y = y + vy * DT;

    if ( x >= TableX1 - rNew )
        {
        x = TableX1 - rNew;

        vx = -vx;

        bounce++;
        }

    if ( y <= TableY1 + rNew )
        {
        y = TableY1 + rNew;

        vy = -vy;

        bounce++;
        }

    if ( x <= rNew )
        {
        x = rNew;

        vx = -vx;

        bounce++;
        }

    if ( y >= txGetExtentY() - rNew )
        {
        y = txGetExtentY() - rNew;

        vy = -vy;

        bounce++;
        }

    /*if ( txGetPixel ( x, y ) == RGB (1, 1, 1) )
        {
        x = rand() % RandX, y = rand() % RandY;
        bounce++;
        }       */
    }

//-----------------------------------------------------------------------------

void CManager::AllBallsPhysics ( )
    {
    for ( int i = 0; i < MomentSize; i++ )
        Array[i].BallPhysics( );
    }

//-----------------------------------------------------------------------------

void CManager::BounceCounter ( )
    {
    PrintBallArray ( );
    }

//-----------------------------------------------------------------------------

void CManager::Selection ( )
    {
    int interval = 0;

    while ( interval < MomentSize )
        {
        int min = 0 + interval;
        int i   = 1 + interval;

        Swapper ( interval, Searcher ( min, i ) );

        interval++;
        }

    }

//-----------------------------------------------------------------------------

int CManager::Searcher ( int min, int i )
    {
    while ( i < MomentSize )
        {
        if ( Array[i].bounce > Array[min].bounce ) min = i;
        i++;
        }

    return min;
    }

//-----------------------------------------------------------------------------

void CManager::Swapper ( int a, int b )
    {
    CBall agent = Array[a];
    Array[a] = Array[b];
    Array[b] = agent;
    }

//-----------------------------------------------------------------------------

void CManager::PrintBallArray ( )
    {
    txSetColor ( TX_BLACK, 5 );

    txSelectFont ("Times New Roman", txGetExtentY()/(TopNum + 1)*1/3);
    txDrawText ((txGetExtentX() - TableX1)/2 + TableX1, 0, txGetExtentX(), txGetExtentY()/(TopNum + 1), "Score");


    txSelectFont ("Times New Roman", txGetExtentY()/(TopNum + 1)*3/3);
    txLine( TableX1, 0, TableX1, txGetExtentY() );
    txLine( (txGetExtentX() - TableX1)/2 + TableX1, 0, (txGetExtentX() - TableX1)/2 + TableX1, txGetExtentY() );

    txDrawText (TableX1, 0, (txGetExtentX() - TableX1)/2 + TableX1, txGetExtentY()/(TopNum + 1), "#");

    if ( txMouseX() >= TableX1 && txMouseX() <= txGetExtentX() )
        {
        COLORREF colorOn = TX_LIGHTCYAN;

        int help = 1;
        while ( help < TopNum + 1 )
            {
            if (txMouseY() >= help*txGetExtentY()/(TopNum + 1) && txMouseY() <= (help + 1)*txGetExtentY()/(TopNum + 1) )
                {
                if ( txMouseButtons() == 1 )  Array[help - 1].rNew = 70;

                txSetFillColor ( colorOn );
                txRectangle (TableX1, help*txGetExtentY()/(TopNum + 1), txGetExtentX(), (help + 1)*txGetExtentY()/(TopNum + 1) );

                Array[help - 1].SFcolor = colorOn;
                }

            else
                {
                Array[help - 1].SFcolor = Array[help - 1].Scolor;
                Array[help - 1].rNew = Array[help - 1].r;
                }

            help++;
            }
        }

    for ( int i = 0; i < TopNum; i++)
        {
        char bounceStr[6] = "";
        char Number[6] = "";

        itoa ( Array[i].bounce, bounceStr, 10 );
        itoa ( i + 1, Number, 10 );

        txSetColor ( TX_BLACK, 5 );

        txLine (TableX1, txGetExtentY()/(TopNum + 1) * (i + 1), txGetExtentX(), txGetExtentY()/(TopNum + 1) * (i + 1) );

        txSetColor ( Array[i].Scolor, 2 );

        txDrawText ( TableX1, txGetExtentY()/(TopNum + 1) * (i + 1), (txGetExtentX() - TableX1)/2 + TableX1,
        txGetExtentY()/(TopNum + 1) * (i + 2), Number );

        txDrawText ( (txGetExtentX() - TableX1)/2 + TableX1, txGetExtentY()/(TopNum + 1) * (i + 1), txGetExtentX(),
        txGetExtentY()/(TopNum + 1) * (i + 2), bounceStr );
        }

    }

//-----------------------------------------------------------------------------

void Title ( int X1, int Y1, int X2, int Y2, COLORREF Tcolor )
    {
    txSetColor ( TX_BLACK, 5 );
    txLine ( X1, Y2, X2, Y2 );

    txSetColor ( Tcolor );
    txSelectFont ("Times New Roman", (Y2 - Y1)*3/4);
    txDrawText ( X1, Y1, X2, Y2, "POOL GAME" );
    }

//-----------------------------------------------------------------------------

void CManager::SizePlus ( )
    {
    if ( MomentSize <=  Size ) MomentSize++;
    }

//-----------------------------------------------------------------------------

void CManager::SizeMinus ( )
    {
    if ( MomentSize >= 0 ) MomentSize--;
    }

//-----------------------------------------------------------------------------

void CManager::MainCycle ( )
    {
    HDC pooltable = txLoadImage ("pooltableWithHoles.bmp");
    HDC Background = txLoadImage ("Background.bmp");

    while ( !GetAsyncKeyState(VK_ESCAPE) )
        {
        if ( GetAsyncKeyState ( VK_SPACE ) )  SizePlus ( );
        if ( GetAsyncKeyState ( VK_BACK ) )  SizeMinus ( );


        AllBallsDraw ( );
        AllBallsPhysics ( );

        Selection ( );
        BounceCounter ( );

        txSetFillColor ( TX_WHITE );
        txSleep(10);
        txClear();

        txBitBlt (txDC(), 0, 0, txGetExtentX(), txGetExtentY(), Background, 0, 0);
        txBitBlt (txDC(), 0, TableY1, txGetExtentX(), txGetExtentY(), pooltable, 0, 0);
        Title ( 0, 0, TableX1,  TableY1, RGB ( 0, 0, 255 ) );
        }

    txDeleteDC( pooltable );
    txDeleteDC( Background );
    }

//-----------------------------------------------------------------------------

int Random ( double min, int max )
    {
    double ran = min + rand()%max;

    return ran;
    }
